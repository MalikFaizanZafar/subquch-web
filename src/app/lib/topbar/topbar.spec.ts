import {
  Component,
  DebugElement,
  NO_ERRORS_SCHEMA
} from '@angular/core';
import {
  async,
  ComponentFixture,
  TestBed
} from '@angular/core/testing';
import { By } from '@angular/platform-browser';
import { RouterTestingModule } from '@angular/router/testing';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

import { IsTopbarLink, IsTopbarLogo, IsTopbar } from './index';
import { IsTopbarModule } from './topbar.module';

describe('IsTopbar', () => {
  let fixture: ComponentFixture<any>;
  let testComponent;
  let topbarDebug: DebugElement;
  let topbarCmp: IsTopbar;
  let topbar: HTMLElement;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      imports: [
        IsTopbarModule,
        RouterTestingModule,
        BrowserAnimationsModule
      ],
      declarations: [
        FluidTopBarController,
        BoxedTopBarController,
        TopbarWithLogoController,
        TopbarWithLinksManuallyConfiguredController,
        TopbarWithLinksAutoGeneratedController
      ],
      providers: [
      ],
      schemas: [NO_ERRORS_SCHEMA]
    }).compileComponents();
  }));

  describe('Fluid top bar', () => {
    beforeEach(() => {
      fixture = TestBed.createComponent(FluidTopBarController);
      testComponent = fixture.componentInstance;

      fixture.detectChanges();

      topbarDebug = fixture.debugElement.query(By.directive(IsTopbar));
      topbarCmp = topbarDebug.componentInstance;
      topbar = topbarDebug.nativeElement;
    });

    it('should render top bar', () => {
      const topbarEle = topbar.querySelector('.is-topbar');

      expect(topbarEle).not.toBe(null);
    });

    it('should not render container div', () => {
      const containerDiv = topbar.querySelector('.container');

      expect(containerDiv).toBe(null);
    });

    it('should render left group', () => {
      const leftGroup = topbar.querySelector('.left-group');

      expect(leftGroup).not.toBe(null);
      expect(leftGroup.textContent).toContain(testComponent.leftContent);
    });

    it('should render center group', () => {
      const centerGroup = topbar.querySelector('.center-group');
      const isDropdown = centerGroup.querySelector('is-dropdown');

      expect(centerGroup).not.toBe(null);
      expect(isDropdown).not.toBe(null);
    });

    it('should render right group', () => {
      const rightGroup = topbar.querySelector('.right-group');
      const isUserProfile = rightGroup.querySelector('is-user-profile');

      expect(rightGroup).not.toBe(null);
      expect(isUserProfile).not.toBe(null);
    });
  });

  describe('Boxed top bar', () => {
    beforeEach(() => {
      fixture = TestBed.createComponent(BoxedTopBarController);
      testComponent = fixture.componentInstance;

      fixture.detectChanges();

      topbarDebug = fixture.debugElement.query(By.directive(IsTopbar));
      topbarCmp = topbarDebug.componentInstance;
      topbar = topbarDebug.nativeElement;
    });

    it('should render top bar', () => {
      const topbarEle = topbar.querySelector('.is-topbar');

      expect(topbarEle).not.toBe(null);
    });

    it('should render container div', () => {
      const containerDiv = topbar.querySelector('.container');

      expect(containerDiv).not.toBe(null);
    });

    it('should render left group', () => {
      const leftGroup = topbar.querySelector('.left-group');

      expect(leftGroup).not.toBe(null);
      expect(leftGroup.textContent).toContain(testComponent.leftContent);
    });

    it('should render center group', () => {
      const centerGroup = topbar.querySelector('.center-group');

      expect(centerGroup).not.toBe(null);
      expect(centerGroup.textContent).toContain(testComponent.centerContent);
    });

    it('should render right group', () => {
      const rightGroup = topbar.querySelector('.right-group');

      expect(rightGroup).not.toBe(null);
      expect(rightGroup.textContent).toContain(testComponent.rightContent);
    });
  });

  describe('Top bar with logo', () => {
    beforeEach(() => {
      fixture = TestBed.createComponent(TopbarWithLogoController);
      testComponent = fixture.componentInstance;

      fixture.detectChanges();

      topbarDebug = fixture.debugElement.query(By.directive(IsTopbar));
      topbarCmp = topbarDebug.componentInstance;
      topbar = topbarDebug.nativeElement;
    });

    it('should render top bar', () => {
      const topbarEle = topbar.querySelector('.is-topbar');

      expect(topbarEle).not.toBe(null);
    });

    it('should render left group', () => {
      const leftGroup = topbar.querySelector('.left-group');
      const isTopbarLogo = topbarDebug.query(By.directive(IsTopbarLogo)).componentInstance;

      expect(leftGroup).not.toBe(null);
      expect(isTopbarLogo).not.toBe(null);
      expect(isTopbarLogo.background).toContain(testComponent.topbarLogoProps.background);
      expect(isTopbarLogo.label).toEqual(testComponent.topbarLogoProps.label);
      expect(isTopbarLogo.name).toEqual(testComponent.topbarLogoProps.name);
    });

    it('should render center group', () => {
      const centerGroup = topbar.querySelector('.center-group');

      expect(centerGroup).not.toBe(null);
      expect(centerGroup.textContent).toContain(testComponent.centerContent);
    });

    it('should render right group', () => {
      const rightGroup = topbar.querySelector('.right-group');

      expect(rightGroup).not.toBe(null);
      expect(rightGroup.textContent).toContain(testComponent.rightContent);
    });
  });

  describe('Top bar with links manually configured', () => {
    beforeEach(() => {
      fixture = TestBed.createComponent(TopbarWithLinksManuallyConfiguredController);
      testComponent = fixture.componentInstance;

      fixture.detectChanges();

      topbarDebug = fixture.debugElement.query(By.directive(IsTopbar));
      topbarCmp = topbarDebug.componentInstance;
      topbar = topbarDebug.nativeElement;
    });

    it('should render top bar', () => {
      const topbarEle = topbar.querySelector('.is-topbar');

      expect(topbarEle).not.toBe(null);
    });

    it('should render left group', () => {
      const leftGroup = topbar.querySelector('.left-group');

      expect(leftGroup).not.toBe(null);
      expect(leftGroup.textContent).toContain(testComponent.leftContent);
    });

    it('should render center group', () => {
      const centerGroup = topbar.querySelector('.center-group');
      const topbarLinksDiv = centerGroup.querySelector('.is-topbar-links');
      const aLinks = topbarLinksDiv.querySelectorAll('a');

      expect(centerGroup).not.toBe(null);
      expect(topbarLinksDiv).not.toBe(null);

      expect(aLinks.length).toEqual(3);
    });

    it('should render right group', () => {
      const rightGroup = topbar.querySelector('.right-group');

      expect(rightGroup).not.toBe(null);
      expect(rightGroup.textContent).toContain(testComponent.rightContent);
    });
  });

  describe('Top bar with links auto-generated', () => {
    beforeEach(() => {
      fixture = TestBed.createComponent(TopbarWithLinksAutoGeneratedController);
      testComponent = fixture.componentInstance;

      fixture.detectChanges();

      topbarDebug = fixture.debugElement.query(By.directive(IsTopbar));
      topbarCmp = topbarDebug.componentInstance;
      topbar = topbarDebug.nativeElement;
    });

    it('should render top bar', () => {
      const topbarEle = topbar.querySelector('.is-topbar');

      expect(topbarEle).not.toBe(null);
    });

    it('should render left group', () => {
      const leftGroup = topbar.querySelector('.left-group');

      expect(leftGroup).not.toBe(null);
      expect(leftGroup.textContent).toContain(testComponent.leftContent);
    });

    it('should render center group', () => {
      const topbarLinksDiv = topbar.querySelector('.is-topbar-links');
      const aLinks = topbarLinksDiv.querySelectorAll('a');

      expect(topbarLinksDiv).not.toBe(null);
      expect(aLinks.length).toEqual(testComponent.autoGeneratedLinks.length);

      Array.from(aLinks).forEach((element, index) => {
        const icon = element.querySelector('.fa');

        expect(element.href).toContain(testComponent.autoGeneratedLinks[index].link);
        expect(icon.classList).toContain(testComponent.autoGeneratedLinks[index].icon);
        expect(element.textContent).toContain(testComponent.autoGeneratedLinks[index].label);
      });
    });

    it('should render right group', () => {
      const rightGroup = topbar.querySelector('.right-group');

      expect(rightGroup).not.toBe(null);
      expect(rightGroup.textContent).toContain(testComponent.rightContent);
    });
  });
});

@Component({
  template: `
  <is-topbar>
    <div class="left-group pl-20">{{leftContent}}</div>
    <div class="center-group">
      <is-dropdown [title]="'Dropdown Title'">
        <a class="dropdown-item"
           href="">Action - 1</a>
        <a class="dropdown-item"
           href="">Another Action</a>
        <a class="dropdown-item"
           href="">Something else is here</a>
      </is-dropdown>
    </div>
    <div class="right-group pr-20">
      <is-user-profile [userName]="'John Doe'"
                       [image]="image">
        <button class="dropdown-item">
          <i class="fa fa-gear"></i> Configuration
        </button>
        <button class="dropdown-item">
          <i class="fa fa-sign-out"></i> Sign Out
        </button>
      </is-user-profile>
    </div>
  </is-topbar>
  `
})
class FluidTopBarController {
  public leftContent = 'left';
  public image = 'http://www.wpclipart.com/signs_symbol/icons_oversized/male_user_icon.png';
}

@Component({
  template: `
  <is-topbar [fluid]="false">
    <div class="left-group">{{ leftContent }}</div>
    <div class="center-group">{{ centerContent }}</div>
    <div class="right-group">{{ rightContent }}</div>
  </is-topbar>
  `
})
class BoxedTopBarController {
  leftContent: String = 'left';
  centerContent: String = 'center';
  rightContent: String = 'right';
}

@Component({
  template: `
  <is-topbar [fluid]="false">
    <div class="left-group">
      <is-topbar-logo [background]="topbarLogoProps.background"
                      [label]="topbarLogoProps.label"
                      [name]="topbarLogoProps.name"></is-topbar-logo>
    </div>
    <div class="center-group">{{ centerContent }}</div>
    <div class="right-group">{{ rightContent }}</div>
  </is-topbar>
  `
})
class TopbarWithLogoController {
  centerContent: String = 'center';
  rightContent: String = 'right';
  topbarLogoProps: object = {
    background: '#FFAB1C',
    label: 'Rlm',
    name: 'Revenue Lifecycle Management',
  };
}

@Component({
  template: `
  <is-topbar [fluid]="false">
    <div class="left-group">{{ leftContent }}</div>
    <div class="center-group">
      <div class="is-topbar-links">
        <a routerLinkActive="active"
           routerLink="/components/topbar">
          <i class="fa fa-bars"></i>
          <span class="is-topbar-link__text">Topbar</span>
        </a>
        <a routerLinkActive="active"
           routerLink="/components/table">
          <i class="fa fa-table"></i>
          <span class="is-topbar-link__text">Table</span>
        </a>
        <a routerLinkActive="active"
           routerLink="/components/snackbar">
          <i class="fa fa-arrow-circle-up"></i>
          <span class="is-topbar-link__text">Snackbar</span>
        </a>
      </div>
    </div>
    <div class="right-group">{{ rightContent }}</div>
  </is-topbar>
  `
})
class TopbarWithLinksManuallyConfiguredController {
  leftContent = 'left';
  rightContent = 'right';
}

@Component({
  template: `
  <is-topbar [fluid]="false"
             [links]="autoGeneratedLinks">
    <div class="left-group">{{ leftContent }}</div>
    <div class="right-group">{{ rightContent }}</div>
  </is-topbar>
  `
})
class TopbarWithLinksAutoGeneratedController {
  leftContent = 'left';
  rightContent = 'right';
  autoGeneratedLinks: IsTopbarLink[] = [
    {link: '/components/topbar', label: 'Topbar', icon: 'fa-bars'},
    {link: '/components/table', label: 'Table', icon: 'fa-table'},
    {link: '/components/snackbar', label: 'Snackbar', icon: 'fa-arrow-circle-up'}
  ];
}
